<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_electric_block</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>Dirt</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
is_live = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check nearest neighbours for power source or conducting block

var half = sprite_width/2; //half block length

var block_left = collision_point(x-half, y+half, ElectricBlock, false, true);
var block_right = collision_point(x+(3*half), y+half, ElectricBlock, false, true);
var block_above = collision_point(x+half, y-half, ElectricBlock, false, true);
var block_below = collision_point(x+half, y+(3*half), ElectricBlock, false, true);

var block_left_power = collision_point(x-half, y+half, PowerBlock, false, true);
var block_right_power = collision_point(x+(3*half), y+half, PowerBlock, false, true);
var block_above_power = collision_point(x+half, y-half, PowerBlock, false, true);
var block_below_power = collision_point(x+half, y+(3*half), PowerBlock, false, true);

/*
if (((block_left or block_right or block_above or block_below) and other.is_live) or ((block_left_power or block_right_power or block_above_power or block_below_power) and other.is_on)) {
    is_live = true; //block is live - conducting electricity
    sprite_index = spr_electric_block_live;
} else {
    is_live = false;
    sprite_index = spr_electric_block;
}*/

if (block_left_power or block_right_power or block_above_power or block_below_power) {
    if (block_left_power.is_on or block_right_power) {
        is_live = true;
        sprite_index = spr_electric_block_live;
    } else {
        is_live = false;
        sprite_index = spr_electric_block;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
/*
var half = sprite_width/2; //half block length
var block_left = collision_point(x-half, y+half, ElectricBlock or PowerBlock, false, true);
var block_right = collision_point(x+(3*half), y+half, ElectricBlock, false, true);
var block_above = collision_point(x+half, y-half, ElectricBlock, false, true);
var block_below = collision_point(x+half, y+(3*half), ElectricBlock, false, true);


    draw_set_colour(c_lime);
    draw_line(x+half,y+half,x-half, y+half);

    draw_set_colour(c_red);
    draw_line(x+half,y+half,x+(3*half), y+half);

    draw_set_colour(c_white);
    draw_line(x+half,y+half,x+half, y-half);

    draw_set_colour(c_blue);
    draw_line(x+half,y+half,x+half, y+(3*half));
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
