<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create a surface for lighting effect size of room

surf = surface_create(room_width, room_height);

surface_set_target(surf);
draw_clear_alpha(c_black, 0);

// Reset to application surface
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Follow player and apply lighting

if (instance_exists(Player)) {
    x += (Player.x - x) / 5;
    y += (Player.y - y) / 5;
} else if (instance_exists(Cursor)) {
    x += (Cursor.x - x) / 5;
    y += (Cursor.y - y) / 5;
}


//Lighting 
if (surface_exists(surf)) {
    surface_set_target(surf);
    
    // Set the dark overlay
    sceneLightness = 0.5;
    draw_set_colour(c_black);
    draw_set_alpha(sceneLightness);
    draw_rectangle(0, 0, room_width, room_height, false);
    
    
    /*
    // Set circles
    draw_set_blend_mode(bm_subtract);   
    
    draw_set_colour(c_black);
    outerCircleLightness=0.2;
    draw_set_alpha(outerCircleLightness);
    
    
    // Draw circles
    var flicker = 1; // amount of flicker
    with (Player) {
        outerRadius = 80 + random_range(-flicker,flicker);
        draw_circle(x + random_range(-flicker,flicker), y + random_range(-flicker, flicker), outerRadius, false);
    }
    
    draw_set_colour(c_white);
    innerCircleLightness = 1;
    draw_set_alpha(innerCircleLightness);
    
    with (Player) {
        innerRadius = 50 + random_range(-flicker,flicker);
        draw_circle(x + random_range(-flicker,flicker), y + random_range(-flicker, flicker), innerRadius, false);
    }*/
    
    light_object(Player, 50, 80, 0);
    
    if (instance_exists(Snake)) {
        light_object(Snake, Snake.sprite_width*0.65, Snake.sprite_width, 0);
    }
    if (instance_exists(Bat)) {
        light_object(Bat, Bat.sprite_width*0.65, Bat.sprite_width, 0);
    }
    if (instance_exists(Spider)) {
        light_object(Spider, Spider.sprite_width*0.65, Spider.sprite_width, 0);
    }
    if (instance_exists(Lava)) {
        light_object(Lava, Lava.sprite_width*0.75, Lava.sprite_width*1.25, Lava.sprite_width/2);
    }
    if (instance_exists(Sapphire)) {
        light_object(Sapphire, Sapphire.sprite_width*0.75, Sapphire.sprite_width, -1);
    }
    if (instance_exists(GraviBullet)) {
        light_object(GraviBullet, GraviBullet.sprite_width*0.75, GraviBullet.sprite_width, 0);
    }
    
    
    
    // Reset all of the set draws
    draw_set_blend_mode(bm_normal);
    draw_set_alpha(1);
    surface_reset_target();
} else {
    surf = surface_create(room_width, room_height);
    surface_set_target(surf);
    draw_clear_alpha(c_black, 0);
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy lighting surface
if (surface_exists(surf)) {
    surface_free(surf);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the lighting surface

if (!surface_exists(surf)) {
    surf = surface_create(room_width, room_height);
} else {
    if (view_current == 0) {
        draw_surface(surf, 0, 0);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
